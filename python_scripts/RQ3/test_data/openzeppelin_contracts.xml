<source file="systems/source-code/openzeppelin-contracts-1.2.0/contracts/token/StandardToken.sol" startline="15" endline="67">
contract StandardToken is ERC20, BasicToken {
    mapping (address = > mapping (address = > uint256)) allowed;
    function transferFrom (address _from, address _to, uint256 _value) returns (bool) {
        var _allowance = allowed [_from] [msg.sender];
        balances [_to] = balances [_to].add (_value);
        balances [_from] = balances [_from].sub (_value);
        allowed [_from] [msg.sender] = _allowance.sub (_value);
        Transfer (_from, _to, _value);
        return true;
    }
    function approve (address _spender, uint256 _value) returns (bool) {
        require ((_value = = 0) | | (allowed [msg.sender] [_spender] = = 0));
        allowed [msg.sender] [_spender] = _value;
        Approval (msg.sender, _spender, _value);
        return true;
    }
    function allowance (address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed [_owner] [_spender];
    }
}
</source>
<source file="systems/source-code/openzeppelin-contracts-1.2.0/contracts/token/TokenTimelock.sol" startline="11" endline="49">
contract TokenTimelock {
    ERC20Basic token;
    address beneficiary;
    uint releaseTime;
    function TokenTimelock (ERC20Basic _token, address _beneficiary, uint _releaseTime) {
        require (_releaseTime > now);
        token = _token;
        beneficiary = _beneficiary;
        releaseTime = _releaseTime;
    }
    function claim () {
        require (msg.sender = = beneficiary);
        release ();
    }
    function release () {
        require (now > = releaseTime);
        uint amount = token.balanceOf (this);
        require (amount > 0);
        token.transfer (beneficiary, amount);
    }
}
</source>